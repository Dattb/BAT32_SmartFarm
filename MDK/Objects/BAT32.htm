<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\BAT32.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\BAT32.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Sat Jul 23 16:24:08 2022
<BR><P>
<H3>Maximum Stack Usage =        184 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Ai7688MessageHandle &rArr; AiUartRead &rArr; controlPWM &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2]">HardFault_Handler</a> from startup_bat32g139.o(.text) referenced from startup_bat32g139.o(RESET)
 <LI><a href="#[6]">IRQ00_Handler</a> from isr_bat32g139.o(.text.IRQ00_Handler) referenced from startup_bat32g139.o(RESET)
 <LI><a href="#[7]">IRQ01_Handler</a> from isr_bat32g139.o(.text.IRQ01_Handler) referenced from startup_bat32g139.o(RESET)
 <LI><a href="#[8]">IRQ02_Handler</a> from isr_bat32g139.o(.text.IRQ02_Handler) referenced from startup_bat32g139.o(RESET)
 <LI><a href="#[9]">IRQ03_Handler</a> from isr_bat32g139.o(.text.IRQ03_Handler) referenced from startup_bat32g139.o(RESET)
 <LI><a href="#[a]">IRQ04_Handler</a> from isr_bat32g139.o(.text.IRQ04_Handler) referenced from startup_bat32g139.o(RESET)
 <LI><a href="#[b]">IRQ05_Handler</a> from isr_bat32g139.o(.text.IRQ05_Handler) referenced from startup_bat32g139.o(RESET)
 <LI><a href="#[c]">IRQ06_Handler</a> from isr_bat32g139.o(.text.IRQ06_Handler) referenced from startup_bat32g139.o(RESET)
 <LI><a href="#[d]">IRQ07_Handler</a> from isr_bat32g139.o(.text.IRQ07_Handler) referenced from startup_bat32g139.o(RESET)
 <LI><a href="#[e]">IRQ08_Handler</a> from isr_bat32g139.o(.text.IRQ08_Handler) referenced from startup_bat32g139.o(RESET)
 <LI><a href="#[f]">IRQ09_Handler</a> from isr_bat32g139.o(.text.IRQ09_Handler) referenced from startup_bat32g139.o(RESET)
 <LI><a href="#[10]">IRQ10_Handler</a> from isr_bat32g139.o(.text.IRQ10_Handler) referenced from startup_bat32g139.o(RESET)
 <LI><a href="#[11]">IRQ11_Handler</a> from isr_bat32g139.o(.text.IRQ11_Handler) referenced from startup_bat32g139.o(RESET)
 <LI><a href="#[12]">IRQ12_Handler</a> from isr_bat32g139.o(.text.IRQ12_Handler) referenced from startup_bat32g139.o(RESET)
 <LI><a href="#[13]">IRQ13_Handler</a> from isr_bat32g139.o(.text.IRQ13_Handler) referenced from startup_bat32g139.o(RESET)
 <LI><a href="#[14]">IRQ14_Handler</a> from isr_bat32g139.o(.text.IRQ14_Handler) referenced from startup_bat32g139.o(RESET)
 <LI><a href="#[15]">IRQ15_Handler</a> from isr_bat32g139.o(.text.IRQ15_Handler) referenced from startup_bat32g139.o(RESET)
 <LI><a href="#[16]">IRQ16_Handler</a> from isr_bat32g139.o(.text.IRQ16_Handler) referenced from startup_bat32g139.o(RESET)
 <LI><a href="#[17]">IRQ17_Handler</a> from isr_bat32g139.o(.text.IRQ17_Handler) referenced from startup_bat32g139.o(RESET)
 <LI><a href="#[18]">IRQ18_Handler</a> from isr_bat32g139.o(.text.IRQ18_Handler) referenced from startup_bat32g139.o(RESET)
 <LI><a href="#[19]">IRQ19_Handler</a> from isr_bat32g139.o(.text.IRQ19_Handler) referenced from startup_bat32g139.o(RESET)
 <LI><a href="#[1a]">IRQ20_Handler</a> from isr_bat32g139.o(.text.IRQ20_Handler) referenced from startup_bat32g139.o(RESET)
 <LI><a href="#[1b]">IRQ21_Handler</a> from isr_bat32g139.o(.text.IRQ21_Handler) referenced from startup_bat32g139.o(RESET)
 <LI><a href="#[1c]">IRQ22_Handler</a> from isr_bat32g139.o(.text.IRQ22_Handler) referenced from startup_bat32g139.o(RESET)
 <LI><a href="#[1d]">IRQ23_Handler</a> from isr_bat32g139.o(.text.IRQ23_Handler) referenced from startup_bat32g139.o(RESET)
 <LI><a href="#[1e]">IRQ24_Handler</a> from isr_bat32g139.o(.text.IRQ24_Handler) referenced from startup_bat32g139.o(RESET)
 <LI><a href="#[1f]">IRQ25_Handler</a> from isr_bat32g139.o(.text.IRQ25_Handler) referenced from startup_bat32g139.o(RESET)
 <LI><a href="#[20]">IRQ26_Handler</a> from isr_bat32g139.o(.text.IRQ26_Handler) referenced from startup_bat32g139.o(RESET)
 <LI><a href="#[21]">IRQ27_Handler</a> from isr_bat32g139.o(.text.IRQ27_Handler) referenced from startup_bat32g139.o(RESET)
 <LI><a href="#[22]">IRQ28_Handler</a> from isr_bat32g139.o(.text.IRQ28_Handler) referenced from startup_bat32g139.o(RESET)
 <LI><a href="#[23]">IRQ29_Handler</a> from isr_bat32g139.o(.text.IRQ29_Handler) referenced from startup_bat32g139.o(RESET)
 <LI><a href="#[24]">IRQ30_Handler</a> from isr_bat32g139.o(.text.IRQ30_Handler) referenced from startup_bat32g139.o(RESET)
 <LI><a href="#[25]">IRQ31_Handler</a> from isr_bat32g139.o(.text.IRQ31_Handler) referenced from startup_bat32g139.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from wdt_user.o(.text.wdt_interrupt) referenced from startup_bat32g139.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_bat32g139.o(.text) referenced from startup_bat32g139.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_bat32g139.o(.text) referenced from startup_bat32g139.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_bat32g139.o(.text) referenced from startup_bat32g139.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from main.o(.text.SysTick_Handler) referenced from startup_bat32g139.o(RESET)
 <LI><a href="#[27]">SystemInit</a> from system_bat32g139.o(.text.SystemInit) referenced from startup_bat32g139.o(.text)
 <LI><a href="#[28]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_bat32g139.o(.text)
 <LI><a href="#[26]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[28]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g139.o(.text)
</UL>
<P><STRONG><a name="[ad]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[29]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[38]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[ae]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[af]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[b0]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[b1]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[b2]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_bat32g139.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g139.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g139.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g139.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g139.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>

<P><STRONG><a name="[2c]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g139.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>

<P><STRONG><a name="[2d]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g139.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>

<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g139.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g139.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g139.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>

<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g139.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g139.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_push_head
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_pop_tail
</UL>

<P><STRONG><a name="[b3]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlPWM
</UL>

<P><STRONG><a name="[31]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlPWM
</UL>

<P><STRONG><a name="[33]"></a>__aeabi_ui2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlPWM
</UL>

<P><STRONG><a name="[34]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_d2iz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlPWM
</UL>

<P><STRONG><a name="[95]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, uidiv_div0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BaudRateCal
</UL>

<P><STRONG><a name="[b5]"></a>__aeabi_uidivmod</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, uidiv_div0.o(.text), UNUSED)

<P><STRONG><a name="[35]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[b6]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[30]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[2a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[b8]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[37]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[b9]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[39]"></a>Ai7688MessageHandle</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ai7688.o(.text.Ai7688MessageHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Ai7688MessageHandle &rArr; AiUartRead &rArr; controlPWM &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AiUartRead
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3a]"></a>AiUartRead</STRONG> (Thumb, 368 bytes, Stack size 40 bytes, ai7688.o(.text.AiUartRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = AiUartRead &rArr; controlPWM &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;respondToAi7688
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createCheckSum
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlSingleRelayState
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlPWM
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlAllRelayState
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_pop_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ai7688MessageHandle
</UL>

<P><STRONG><a name="[56]"></a>CAN0Err_Interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32g139.o(.text.CAN0Err_Interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ09_Handler
</UL>

<P><STRONG><a name="[72]"></a>CAN0Rec_Interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32g139.o(.text.CAN0Rec_Interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ23_Handler
</UL>

<P><STRONG><a name="[76]"></a>CAN0Trx_Interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32g139.o(.text.CAN0Trx_Interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ25_Handler
</UL>

<P><STRONG><a name="[74]"></a>CAN0Wup_Interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32g139.o(.text.CAN0Wup_Interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ24_Handler
</UL>

<P><STRONG><a name="[78]"></a>CAN1Err_Interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32g139.o(.text.CAN1Err_Interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ26_Handler
</UL>

<P><STRONG><a name="[7c]"></a>CAN1Rec_Interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32g139.o(.text.CAN1Rec_Interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ29_Handler
</UL>

<P><STRONG><a name="[80]"></a>CAN1Trx_Interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32g139.o(.text.CAN1Trx_Interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ31_Handler
</UL>

<P><STRONG><a name="[7e]"></a>CAN1Wup_Interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32g139.o(.text.CAN1Wup_Interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ30_Handler
</UL>

<P><STRONG><a name="[86]"></a>CLK_GetCoreFreq</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, system_bat32g139.o(.text.CLK_GetCoreFreq))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[6]"></a>IRQ00_Handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, isr_bat32g139.o(.text.IRQ00_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ00_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdc_interrupt
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrv_interrupt
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvi_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g139.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>IRQ01_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, isr_bat32g139.o(.text.IRQ01_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ01_Handler &rArr; intp6_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp6_interrupt
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp0_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g139.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>IRQ02_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, isr_bat32g139.o(.text.IRQ02_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ02_Handler &rArr; intp7_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp7_interrupt
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp1_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g139.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>IRQ03_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, isr_bat32g139.o(.text.IRQ03_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ03_Handler &rArr; intp8_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp8_interrupt
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp2_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g139.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>IRQ04_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, isr_bat32g139.o(.text.IRQ04_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ04_Handler &rArr; intp9_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp9_interrupt
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp3_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g139.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>IRQ05_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, isr_bat32g139.o(.text.IRQ05_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ05_Handler &rArr; intp4_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp4_interrupt
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp10_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g139.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>IRQ06_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, isr_bat32g139.o(.text.IRQ06_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ06_Handler &rArr; intp5_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp5_interrupt
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp11_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g139.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>IRQ07_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, isr_bat32g139.o(.text.IRQ07_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IRQ07_Handler &rArr; uart3_interrupt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_interrupt_send
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_interrupt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g139.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>IRQ08_Handler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, isr_bat32g139.o(.text.IRQ08_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IRQ08_Handler &rArr; uart3_interrupt_receive
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_push_head
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_interrupt_receive
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_interrupt_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g139.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>IRQ09_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, isr_bat32g139.o(.text.IRQ09_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ09_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sre2_interrupt
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0Err_Interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g139.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>IRQ10_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32g139.o(.text.IRQ10_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ10_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_interrupt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g139.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>IRQ11_Handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, isr_bat32g139.o(.text.IRQ11_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IRQ11_Handler &rArr; uart0_interrupt_receive
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_interrupt_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g139.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>IRQ12_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, isr_bat32g139.o(.text.IRQ12_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ12_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm01h_interrupt
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sre0_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g139.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>IRQ13_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32g139.o(.text.IRQ13_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ13_Handler &rArr; uart1_interrupt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_interrupt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g139.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>IRQ14_Handler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, isr_bat32g139.o(.text.IRQ14_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IRQ14_Handler &rArr; ring_push_head
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_push_head
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_interrupt_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g139.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>IRQ15_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, isr_bat32g139.o(.text.IRQ15_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ15_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm03h_interrupt
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sre1_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g139.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>IRQ16_Handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, isr_bat32g139.o(.text.IRQ16_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ16_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iica1_interrupt
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iica0_interrupt
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;div_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g139.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>IRQ17_Handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, isr_bat32g139.o(.text.IRQ17_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ17_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm81_channel14_interrupt
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm81_channel10_interrupt
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm40_channel0_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g139.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>IRQ18_Handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, isr_bat32g139.o(.text.IRQ18_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ18_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm81_channel15_interrupt
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm81_channel11_interrupt
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm40_channel1_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g139.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>IRQ19_Handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, isr_bat32g139.o(.text.IRQ19_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ19_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm81_channel16_interrupt
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm81_channel12_interrupt
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm40_channel2_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g139.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>IRQ20_Handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, isr_bat32g139.o(.text.IRQ20_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ20_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm81_channel17_interrupt
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm81_channel13_interrupt
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm40_channel3_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g139.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>IRQ21_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32g139.o(.text.IRQ21_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ21_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g139.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>IRQ22_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, isr_bat32g139.o(.text.IRQ22_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ22_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_interrupt
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;it_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g139.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>IRQ23_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, isr_bat32g139.o(.text.IRQ23_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ23_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_interrupt
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0Rec_Interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g139.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>IRQ24_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, isr_bat32g139.o(.text.IRQ24_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ24_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp0_interrupt
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0Wup_Interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g139.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>IRQ25_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, isr_bat32g139.o(.text.IRQ25_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ25_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp1_interrupt
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0Trx_Interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g139.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>IRQ26_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, isr_bat32g139.o(.text.IRQ26_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ26_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tma0_interrupt
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1Err_Interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g139.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>IRQ27_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32g139.o(.text.IRQ27_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = IRQ27_Handler &rArr; tmm0_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmm0_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g139.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>IRQ28_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32g139.o(.text.IRQ28_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = IRQ28_Handler &rArr; tmm1_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmm1_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g139.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>IRQ29_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, isr_bat32g139.o(.text.IRQ29_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ29_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmb0_interrupt
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1Rec_Interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g139.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>IRQ30_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, isr_bat32g139.o(.text.IRQ30_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ30_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmc_interrupt
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1Wup_Interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g139.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>IRQ31_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, isr_bat32g139.o(.text.IRQ31_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ31_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1Trx_Interrupt
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g139.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>PORT_Init</STRONG> (Thumb, 248 bytes, Stack size 8 bytes, gpio.o(.text.PORT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRelayState
</UL>

<P><STRONG><a name="[81]"></a>RD_init_ring</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rd_init.o(.text.RD_init_ring))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RD_init_ring &rArr; ring_init
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_init
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(.text.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g139.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, system_bat32g139.o(.text.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetCoreFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[27]"></a>SystemInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, system_bat32g139.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetCoreFreq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g139.o(.text)
</UL>
<P><STRONG><a name="[88]"></a>TM40_Channel_Start</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tim4.o(.text.TM40_Channel_Start))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM40_PWM_1Period_1Duty
</UL>

<P><STRONG><a name="[87]"></a>TM40_PWM_1Period_1Duty</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, tim4.o(.text.TM40_PWM_1Period_1Duty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TM40_PWM_1Period_1Duty
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM40_Channel_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlPWM
</UL>

<P><STRONG><a name="[89]"></a>UART0_BaudRate</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, sci.o(.text.UART0_BaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART0_BaudRate &rArr; UART_BaudRateCal &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BaudRateCal
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
</UL>

<P><STRONG><a name="[8b]"></a>UART0_Init</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, sci.o(.text.UART0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UART0_Init &rArr; UART0_BaudRate &rArr; UART_BaudRateCal &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_BaudRate
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8c]"></a>UART1_BaudRate</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, sci.o(.text.UART1_BaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART1_BaudRate &rArr; UART_BaudRateCal &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BaudRateCal
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
</UL>

<P><STRONG><a name="[8d]"></a>UART1_Init</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, sci.o(.text.UART1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UART1_Init &rArr; UART1_BaudRate &rArr; UART_BaudRateCal &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Start
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_BaudRate
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8e]"></a>UART1_Start</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, sci.o(.text.UART1_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART1_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
</UL>

<P><STRONG><a name="[90]"></a>UART2_BaudRate</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, sci.o(.text.UART2_BaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART2_BaudRate &rArr; UART_BaudRateCal &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BaudRateCal
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Init
</UL>

<P><STRONG><a name="[91]"></a>UART2_Init</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, sci.o(.text.UART2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UART2_Init &rArr; UART2_BaudRate &rArr; UART_BaudRateCal &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Start
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BaudRate
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[93]"></a>UART2_Send</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, sci.o(.text.UART2_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART2_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Restart
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;respondToAi7688
</UL>

<P><STRONG><a name="[92]"></a>UART2_Start</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, sci.o(.text.UART2_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART2_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Init
</UL>

<P><STRONG><a name="[8a]"></a>UART_BaudRateCal</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, sci.o(.text.UART_BaudRateCal))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_BaudRateCal &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BaudRate
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_BaudRate
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_BaudRate
</UL>

<P><STRONG><a name="[94]"></a>WDT_Restart</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wdt.o(.text.WDT_Restart))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Send
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6e]"></a>adc_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32g139.o(.text.adc_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ21_Handler
</UL>

<P><STRONG><a name="[73]"></a>cmp0_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32g139.o(.text.cmp0_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ24_Handler
</UL>

<P><STRONG><a name="[75]"></a>cmp1_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32g139.o(.text.cmp1_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ25_Handler
</UL>

<P><STRONG><a name="[96]"></a>controlAllRelay</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, rd_init.o(.text.controlAllRelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = controlAllRelay
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3f]"></a>controlAllRelayState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ai7688.o(.text.controlAllRelayState))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AiUartRead
</UL>

<P><STRONG><a name="[40]"></a>controlPWM</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ai7688.o(.text.controlPWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = controlPWM &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM40_PWM_1Period_1Duty
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AiUartRead
</UL>

<P><STRONG><a name="[3d]"></a>controlSingleRelayState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ai7688.o(.text.controlSingleRelayState))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AiUartRead
</UL>

<P><STRONG><a name="[3c]"></a>createCheckSum</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ai7688.o(.text.createCheckSum))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AiUartRead
</UL>

<P><STRONG><a name="[60]"></a>div_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32g139.o(.text.div_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ16_Handler
</UL>

<P><STRONG><a name="[97]"></a>gpio_write</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio.o(.text.gpio_write))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlAllRelay
</UL>

<P><STRONG><a name="[5f]"></a>iica0_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32g139.o(.text.iica0_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ16_Handler
</UL>

<P><STRONG><a name="[61]"></a>iica1_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32g139.o(.text.iica1_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ16_Handler
</UL>

<P><STRONG><a name="[44]"></a>intp0_interrupt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, intp_user.o(.text.intp0_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = intp0_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp0_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ01_Handler
</UL>

<P><STRONG><a name="[4d]"></a>intp10_interrupt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, intp_user.o(.text.intp10_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = intp10_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp10_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ05_Handler
</UL>

<P><STRONG><a name="[4f]"></a>intp11_interrupt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, intp_user.o(.text.intp11_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = intp11_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp11_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ06_Handler
</UL>

<P><STRONG><a name="[46]"></a>intp1_interrupt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, intp_user.o(.text.intp1_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = intp1_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp1_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ02_Handler
</UL>

<P><STRONG><a name="[48]"></a>intp2_interrupt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, intp_user.o(.text.intp2_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = intp2_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp2_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ03_Handler
</UL>

<P><STRONG><a name="[4a]"></a>intp3_interrupt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, intp_user.o(.text.intp3_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = intp3_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp3_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ04_Handler
</UL>

<P><STRONG><a name="[4c]"></a>intp4_interrupt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, intp_user.o(.text.intp4_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = intp4_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp4_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ05_Handler
</UL>

<P><STRONG><a name="[4e]"></a>intp5_interrupt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, intp_user.o(.text.intp5_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = intp5_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp5_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ06_Handler
</UL>

<P><STRONG><a name="[45]"></a>intp6_interrupt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, intp_user.o(.text.intp6_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = intp6_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp6_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ01_Handler
</UL>

<P><STRONG><a name="[47]"></a>intp7_interrupt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, intp_user.o(.text.intp7_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = intp7_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp7_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ02_Handler
</UL>

<P><STRONG><a name="[49]"></a>intp8_interrupt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, intp_user.o(.text.intp8_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = intp8_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp8_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ03_Handler
</UL>

<P><STRONG><a name="[4b]"></a>intp9_interrupt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, intp_user.o(.text.intp9_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = intp9_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp9_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ04_Handler
</UL>

<P><STRONG><a name="[70]"></a>it_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32g139.o(.text.it_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ22_Handler
</UL>

<P><STRONG><a name="[71]"></a>key_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32g139.o(.text.key_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ23_Handler
</UL>

<P><STRONG><a name="[41]"></a>lvi_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32g139.o(.text.lvi_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ00_Handler
</UL>

<P><STRONG><a name="[26]"></a>main</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = main &rArr; Ai7688MessageHandle &rArr; AiUartRead &rArr; controlPWM &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRelayState
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlAllRelay
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Restart
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RD_init_ring
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ai7688MessageHandle
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[43]"></a>ocrv_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32g139.o(.text.ocrv_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ00_Handler
</UL>

<P><STRONG><a name="[42]"></a>osdc_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32g139.o(.text.osdc_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ00_Handler
</UL>

<P><STRONG><a name="[3e]"></a>respondToAi7688</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ai7688.o(.text.respondToAi7688))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = respondToAi7688 &rArr; UART2_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AiUartRead
</UL>

<P><STRONG><a name="[82]"></a>ring_init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ringbuffer.o(.text.ring_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ring_init
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RD_init_ring
</UL>

<P><STRONG><a name="[3b]"></a>ring_pop_tail</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ringbuffer.o(.text.ring_pop_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ring_pop_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AiUartRead
</UL>

<P><STRONG><a name="[53]"></a>ring_push_head</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ringbuffer.o(.text.ring_push_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ring_push_head
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ14_Handler
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ08_Handler
</UL>

<P><STRONG><a name="[6f]"></a>rtc_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32g139.o(.text.rtc_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ22_Handler
</UL>

<P><STRONG><a name="[a4]"></a>setRelayState</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rd_init.o(.text.setRelayState))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = setRelayState &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[59]"></a>sre0_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32g139.o(.text.sre0_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ12_Handler
</UL>

<P><STRONG><a name="[5d]"></a>sre1_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32g139.o(.text.sre1_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ15_Handler
</UL>

<P><STRONG><a name="[55]"></a>sre2_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32g139.o(.text.sre2_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ09_Handler
</UL>

<P><STRONG><a name="[5a]"></a>tm01h_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32g139.o(.text.tm01h_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ12_Handler
</UL>

<P><STRONG><a name="[5e]"></a>tm03h_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32g139.o(.text.tm03h_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ15_Handler
</UL>

<P><STRONG><a name="[62]"></a>tm40_channel0_interrupt</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, tim4_user.o(.text.tm40_channel0_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ17_Handler
</UL>

<P><STRONG><a name="[65]"></a>tm40_channel1_interrupt</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, tim4_user.o(.text.tm40_channel1_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ18_Handler
</UL>

<P><STRONG><a name="[68]"></a>tm40_channel2_interrupt</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, tim4_user.o(.text.tm40_channel2_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ19_Handler
</UL>

<P><STRONG><a name="[6b]"></a>tm40_channel3_interrupt</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, tim4_user.o(.text.tm40_channel3_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ20_Handler
</UL>

<P><STRONG><a name="[63]"></a>tm81_channel10_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32g139.o(.text.tm81_channel10_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ17_Handler
</UL>

<P><STRONG><a name="[66]"></a>tm81_channel11_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32g139.o(.text.tm81_channel11_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ18_Handler
</UL>

<P><STRONG><a name="[69]"></a>tm81_channel12_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32g139.o(.text.tm81_channel12_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ19_Handler
</UL>

<P><STRONG><a name="[6c]"></a>tm81_channel13_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32g139.o(.text.tm81_channel13_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ20_Handler
</UL>

<P><STRONG><a name="[64]"></a>tm81_channel14_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32g139.o(.text.tm81_channel14_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ17_Handler
</UL>

<P><STRONG><a name="[67]"></a>tm81_channel15_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32g139.o(.text.tm81_channel15_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ18_Handler
</UL>

<P><STRONG><a name="[6a]"></a>tm81_channel16_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32g139.o(.text.tm81_channel16_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ19_Handler
</UL>

<P><STRONG><a name="[6d]"></a>tm81_channel17_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32g139.o(.text.tm81_channel17_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ20_Handler
</UL>

<P><STRONG><a name="[77]"></a>tma0_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32g139.o(.text.tma0_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ26_Handler
</UL>

<P><STRONG><a name="[7b]"></a>tmb0_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32g139.o(.text.tmb0_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ29_Handler
</UL>

<P><STRONG><a name="[7d]"></a>tmc_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32g139.o(.text.tmc_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ30_Handler
</UL>

<P><STRONG><a name="[79]"></a>tmm0_interrupt</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, timm_user.o(.text.tmm0_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tmm0_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ27_Handler
</UL>

<P><STRONG><a name="[7a]"></a>tmm1_interrupt</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, timm_user.o(.text.tmm1_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tmm1_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ28_Handler
</UL>

<P><STRONG><a name="[58]"></a>uart0_interrupt_receive</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, sci_user.o(.text.uart0_interrupt_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart0_interrupt_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ11_Handler
</UL>

<P><STRONG><a name="[57]"></a>uart0_interrupt_send</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, sci_user.o(.text.uart0_interrupt_send))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ10_Handler
</UL>

<P><STRONG><a name="[5c]"></a>uart1_interrupt_receive</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, sci_user.o(.text.uart1_interrupt_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart1_interrupt_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ14_Handler
</UL>

<P><STRONG><a name="[5b]"></a>uart1_interrupt_send</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, sci_user.o(.text.uart1_interrupt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart1_interrupt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_callback_sendend
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ13_Handler
</UL>

<P><STRONG><a name="[52]"></a>uart2_interrupt_receive</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, sci_user.o(.text.uart2_interrupt_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart2_interrupt_receive
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ08_Handler
</UL>

<P><STRONG><a name="[50]"></a>uart2_interrupt_send</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, sci_user.o(.text.uart2_interrupt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart2_interrupt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_callback_sendend
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ07_Handler
</UL>

<P><STRONG><a name="[54]"></a>uart3_interrupt_receive</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, sci_user.o(.text.uart3_interrupt_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart3_interrupt_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ08_Handler
</UL>

<P><STRONG><a name="[51]"></a>uart3_interrupt_send</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sci_user.o(.text.uart3_interrupt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart3_interrupt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ07_Handler
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wdt_user.o(.text.wdt_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g139.o(RESET)
</UL>
<P><STRONG><a name="[ba]"></a>wdt_interrupt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wdt_user.o(.text.wdt_interrupt), UNUSED)

<P><STRONG><a name="[36]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[bb]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[bc]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[bd]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[be]"></a>EraseChip</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, flash.o(ram_fetch_code), UNUSED)

<P><STRONG><a name="[ac]"></a>EraseSector</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, flash.o(ram_fetch_code), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>

<P><STRONG><a name="[ab]"></a>ProgramPage</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, flash.o(ram_fetch_code), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>

<P><STRONG><a name="[7f]"></a>flash_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, flash_user.o(ram_fetch_code))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ31_Handler
</UL>

<P><STRONG><a name="[aa]"></a>flash_write</STRONG> (Thumb, 212 bytes, Stack size 552 bytes, flash_user.o(ram_fetch_code), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramPage
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseSector
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[83]"></a>SysTick_Config</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(.text.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[84]"></a>__NVIC_SetPriority</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(.text.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>

<P><STRONG><a name="[8f]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sci.o(.text.__NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Start
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Start
</UL>

<P><STRONG><a name="[98]"></a>intp0_callback</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, intp_user.o(.text.intp0_callback))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp0_interrupt
</UL>

<P><STRONG><a name="[99]"></a>intp10_callback</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, intp_user.o(.text.intp10_callback))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp10_interrupt
</UL>

<P><STRONG><a name="[9a]"></a>intp11_callback</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, intp_user.o(.text.intp11_callback))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp11_interrupt
</UL>

<P><STRONG><a name="[9b]"></a>intp1_callback</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, intp_user.o(.text.intp1_callback))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp1_interrupt
</UL>

<P><STRONG><a name="[9c]"></a>intp2_callback</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, intp_user.o(.text.intp2_callback))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp2_interrupt
</UL>

<P><STRONG><a name="[9d]"></a>intp3_callback</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, intp_user.o(.text.intp3_callback))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp3_interrupt
</UL>

<P><STRONG><a name="[9e]"></a>intp4_callback</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, intp_user.o(.text.intp4_callback))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp4_interrupt
</UL>

<P><STRONG><a name="[9f]"></a>intp5_callback</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, intp_user.o(.text.intp5_callback))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp5_interrupt
</UL>

<P><STRONG><a name="[a0]"></a>intp6_callback</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, intp_user.o(.text.intp6_callback))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp6_interrupt
</UL>

<P><STRONG><a name="[a1]"></a>intp7_callback</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, intp_user.o(.text.intp7_callback))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp7_interrupt
</UL>

<P><STRONG><a name="[a2]"></a>intp8_callback</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, intp_user.o(.text.intp8_callback))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp8_interrupt
</UL>

<P><STRONG><a name="[a3]"></a>intp9_callback</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, intp_user.o(.text.intp9_callback))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp9_interrupt
</UL>

<P><STRONG><a name="[a8]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sci_user.o(.text.__NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_interrupt_receive
</UL>

<P><STRONG><a name="[a7]"></a>uart1_callback_sendend</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sci_user.o(.text.uart1_callback_sendend))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_interrupt_send
</UL>

<P><STRONG><a name="[a9]"></a>uart2_callback_sendend</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sci_user.o(.text.uart2_callback_sendend))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_interrupt_send
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
